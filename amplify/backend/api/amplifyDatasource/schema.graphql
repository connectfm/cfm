type Artist @auth(rules: [{allow: public}]) @model {
  id: ID!
  art_id: String!
  name: String
}

type Song @auth(rules: [{allow: public}]) @model {
  id: ID!
  uri: String!
  name: String
  artists: [Artist] @connection
  duration: Int
}

type Event @auth(rules: [{allow: public}]) @model {
  id: ID!
  song: Song! @connection
  timestamp: AWSTimestamp
  rating: Int
}

type History @auth(rules: [{allow: public}]) @model {
  id: ID!
  lastUpdated: String
  events: [Event] @connection
}

type SongFeatures {
  song_id: String!
  danceability: Float!
  energy: Float!
  loudness: Float!
  speechiness: Float!
  acousticness: Float!
  instrumentalness: Float!
  liveness: Float!
  valence: Float!
  tempo: Float!
  song: Song!
}

type Playlist @auth(rules: [{allow: public}]) @model {
  id: ID!
  playlist_id: String!
  name: String!
  songs: [Song] @connection
}

type Location {
  lat: Float!
  longi: Float!
  radius: Float
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  email: String!
  taste: SongFeatures
  bias: Float
  location: Location
  history: History @connection
}